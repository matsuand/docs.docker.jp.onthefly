%This is the change file for the original Docker's Documentation file.
%This is part of Japanese translation version for Docker's Documantation.

@x
command: docker import
short: Import the contents from a tarball to create a filesystem image
@y
command: docker import
short: tarball の内容をインポートしてファイルシステムイメージを生成します。
@z

@x
long: |-
  You can specify a `URL` or `-` (dash) to take data directly from `STDIN`. The
  `URL` can point to an archive (.tar, .tar.gz, .tgz, .bzip, .tar.xz, or .txz)
  containing a filesystem or to an individual file on the Docker host.  If you
  specify an archive, Docker untars it in the container relative to the `/`
  (root). If you specify an individual file, you must specify the full path within
  the host. To import from a remote location, specify a `URI` that begins with the
  `http://` or `https://` protocol.
@y
long: |-
  引数には`URL`が指定できます。
  また`-`（ダッシュ）を指定すると`STDIN`からデータを直接入力できます。
  `URL`には、ファイルシステムを含んだアーカイブ（.tar, .tar.gz, .tgz, .bzip, .tar.xz, .txz）を指定するか、Docker ホスト上の個別ファイルを指定します。
  アーカイブを指定した場合、Docker はそれをコンテナー内において、`/`（ルート）からの相対位置に伸張（展開）します。
  個別のファイルを指定する場合には、ホスト内のフルパスの指定でなければなりません。
  リモートからインポートを行う場合、`http://`または`https://`プロトコルによる`URI`を指定します。
@z

@x
  The `--change` option applies `Dockerfile` instructions to the image that is
  created. Supported `Dockerfile` instructions:
  `CMD`|`ENTRYPOINT`|`ENV`|`EXPOSE`|`ONBUILD`|`USER`|`VOLUME`|`WORKDIR`
@y
  `--change`オプションは、生成されたイメージに対して`Dockerfile`命令を適用します。
  サポートされている`Dockerfile`命令は以下のとおりです。
  `CMD`|`ENTRYPOINT`|`ENV`|`EXPOSE`|`ONBUILD`|`USER`|`VOLUME`|`WORKDIR`
@z

@x
usage: docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]
pname: docker
plink: docker.yaml
options:
@y
usage: docker import [オプション] file|URL|- [REPOSITORY[:TAG]]
pname: docker
plink: docker.yaml
options:
@z

@x
- option: change
  shorthand: c
  value_type: list
  description: Apply Dockerfile instruction to the created image
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: change
  shorthand: c
  value_type: list
  description: 生成したイメージに対して Dockerfile 命令を適用します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: message
  shorthand: m
  value_type: string
  description: Set commit message for imported image
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: message
  shorthand: m
  value_type: string
  description: インポートしたイメージに対するコミットメッセージを設定します。
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
- option: platform
  value_type: string
  description: Set platform if server is multi-platform capable
  deprecated: false
  min_api_version: "1.32"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@y
- option: platform
  value_type: string
  description: サーバーがマルチプラットフォームに対応している場合に、プラットフォームを指定します。
  deprecated: false
  min_api_version: "1.32"
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
@z

@x
examples: |-
  ### Import from a remote location
@y
examples: |-
  {: #import-from-a-remote-location }
  ### リモートからのインポート
@z

@x
  This creates a new untagged image.
@y
  以下は、新たなタグなしのイメージを生成します。
@z

@x
  ```console
  $ docker import https://example.com/exampleimage.tgz
  ```
@y
  ```console
  $ docker import https://example.com/exampleimage.tgz
  ```
@z

@x
  ### Import from a local file
@y
  {: #import-from-a-local-file }
  ### ローカルファイルからのインポート
@z

@x
  Import to docker via pipe and `STDIN`.
@y
  パイプと`STDIN`を通じてインポートします。
@z

@x
  ```console
  $ cat exampleimage.tgz | docker import - exampleimagelocal:new
  ```
@y
  ```console
  $ cat exampleimage.tgz | docker import - exampleimagelocal:new
  ```
@z

@x
  Import with a commit message.
@y
  コミットメッセージをつけてインポートします。
@z

@x
  ```console
  $ cat exampleimage.tgz | docker import --message "New image imported from tarball" - exampleimagelocal:new
  ```
@y
  ```console
  $ cat exampleimage.tgz | docker import --message "New image imported from tarball" - exampleimagelocal:new
  ```
@z

@x
  Import to docker from a local archive.
@y
  ローカルのアーカイブからインポートします。
@z

@x
  ```console
  $ docker import /path/to/exampleimage.tgz
  ```
@y
  ```console
  $ docker import /path/to/exampleimage.tgz
  ```
@z

@x
  ### Import from a local directory
@y
  {: #import-from-a-local-directory }
  ### ローカルディレクトリからのインポート
@z

@x
  ```console
  $ sudo tar -c . | docker import - exampleimagedir
  ```
@y
  ```console
  $ sudo tar -c . | docker import - exampleimagedir
  ```
@z

@x
  ### Import from a local directory with new configurations
@y
  {: #import-from-a-local-directory-with-new-configurations }
  ### 新たな設定を加えて、ローカルディレクトリからのインポート
@z

@x
  ```console
  $ sudo tar -c . | docker import --change "ENV DEBUG=true" - exampleimagedir
  ```
@y
  ```console
  $ sudo tar -c . | docker import --change "ENV DEBUG=true" - exampleimagedir
  ```
@z

@x
  Note the `sudo` in this example – you must preserve
  the ownership of the files (especially root ownership) during the
  archiving with tar. If you are not root (or the sudo command) when you
  tar, then the ownerships might not get preserved.
@y
  上の例においては`sudo`を用いています。
  tar によりアーカイブを生成する際には、ファイルの所有権（特に root 所有権）は保持しておかなければなりません。
  tar 処理の際に root（sudo コマンド）ではない場合、所有権が保持されないことになります。
@z

@x
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false
@y
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false
@z
